O(1):       The running time of constant-time algorithm and does not depend of input size
O(log n):   A algorithm that halves the input size at each step.
O(root(n)): A square root algorithm that is slower than O(log n) but faster than O(n).
            Special property: root(n) = n / root(n). So, n can be divided into O(root(n)) blocks of O(root(n)) elements.
O(n):       An algorithm that access each input element one time before reporting result
O(n log n): Indicates that algorithm sorts the input (O(n log n) for efficient sorting) or each operation takes O(log n) time.
O(n^2):     algorithm contains two nested loops
O(n^3):     algorithm contains three nested loops
O(2^n):     algorithm iterates through all subsets of input. 
            Subset of {1,2,3}: {},{1},{2},{3},{1,2},{1,3},{2,3} and {1,2,3} 
O(n!):      algorithm iterates through all permutations of the input element.
            Permutations of {1,2,3}: (1,2,3),(1,3,2),(2,1,3),(2,3,1),(3,1,2) and (3,2,1)

** O denotes the upper bound for running time of algorithm
** n denotes the input size